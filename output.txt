cc  -g 	compiler.c \
			get_next_linev2/get_next_line.c\
			get_next_linev2/get_next_line_utils.c\
		-o รงc
./รงc -I./ft_cedille_spec ./ft_cedille_spec/spec-mvp.รง -e -compiler.c -o ./ft_cedille_spec_build
output path	: ./ft_cedille_spec_build
output sufix	: -compiler.c
includes[]	: /usr/include
includes[]	: /usr/local/include
includes[]	: ./ft_cedille_spec
sources[]	: ./ft_cedille_spec/spec-mvp.รง
__________
#parsing: ./ft_cedille_spec/spec-mvp.รง
0:	#
1:	import
2:	"
3:	รง
4:	"
__________
#parsing: รง
-- parse() returned 0
__________
#parsing: /usr/include/รง
-- parse(/usr/include/รง) returned 4242
__________
#parsing: /usr/local/include/รง
-- parse(/usr/local/include/รง) returned 4242
__________
#parsing: ./ft_cedille_spec/รง
0:	#
1:	ifndef
2:	FT_CEDILLE_H
3:	#
4:	define
5:	FT_CEDILLE_H
6:	#
7:	define
8:	TOKENPASTE
9:	(
10:	x
11:	,
12:	y
13:	)
14:	x
15:	#
16:	#
17:	y
18:	#
19:	define
20:	TOKENPASTE2
21:	(
22:	x
23:	,
24:	y
25:	)
26:	TOKENPASTE
27:	(
28:	x
29:	,
30:	y
31:	)
32:	#
33:	define
34:	rule
35:	(
36:	.
37:	.
38:	.
39:	)
40:	TOKENPASTE2
41:	(
42:	char
43:	*
44:	r_
45:	,
46:	__LINE__
47:	)
48:	(
49:	int
50:	i
51:	,
52:	int
53:	x
54:	,
55:	char
56:	*
57:	s
58:	)
59:	#
60:	define
61:	macro
62:	#
63:	define
64:	cat
65:	(
66:	.
67:	.
68:	.
69:	)
70:	"
71:	"
72:	#
73:	endif
__________
5:	#
6:	import
7:	"
8:	spec
9:	-
10:	mvp2
11:	.
12:	รง
13:	"
__________
#parsing: spec-mvp2.รง
-- parse(./ft_cedille_spec/รง) returned 0
__________
#parsing: /usr/include/spec-mvp2.รง
-- parse(/usr/include/spec-mvp2.รง) returned 4242
__________
#parsing: /usr/local/include/spec-mvp2.รง
-- parse(/usr/local/include/spec-mvp2.รง) returned 4242
__________
#parsing: ./ft_cedille_spec/spec-mvp2.รง
0:	#
1:	import
2:	"
3:	รง
4:	"
[1mรง:0:0: [31merror: [0m[1mFile 'รง' already included !
[0m
5:	#
6:	define
7:	semicolon
8:	'
9:	;
10:	'
11:	macro
12:	int
13:	g
14:	(
15:	int
16:	z
17:	)
18:	{
19:	return
20:	z
21:	;
22:	}
23:	macro
24:	rule
25:	(
26:	<
27:	;
28:	s
29:	[
30:	i
31:	+
32:	x
33:	]
34:	=
35:	=
36:	"
37:	Hallo
38:	"
39:	[
40:	x
41:	]
42:	;
43:	x
44:	<
45:	6
46:	;
47:	>
48:	<
49:	;
50:	name
51:	[
52:	x
53:	]
54:	=
55:	s
56:	[
57:	i
58:	+
59:	x
60:	]
61:	;
62:	s
63:	[
64:	i
65:	+
66:	x
67:	]
68:	!
69:	=
70:	semicolon
71:	;
72:	>
73:	)
74:	{
75:	return
76:	(
77:	cat
78:	(
79:	"
80:	Hello
81:	 
82:	"
83:	,
84:	name
85:	)
86:	)
87:	;
88:	}
Macro pattern[pattern='
	<; s[i + x] == "Hallo"[x] ; x < 6  ;>
		<; name[x] = s[i + x] ; s[i + x] != semicolon ;>
'
	body='
	return (cat("Hello ", name));
']
__________
14:	#
15:	include
16:	"
17:	stdio
18:	.
19:	h
20:	"
21:	macro
22:	int
23:	m_state_test
24:	=
25:	0
26:	;
27:	macro
28:	int
29:	f
30:	(
31:	int
32:	x
33:	)
34:	{
35:	return
36:	(
37:	x
38:	)
39:	;
40:	}
41:	macro
42:	rule
43:	(
44:	<
45:	;
46:	s
47:	[
48:	i
49:	+
50:	x
51:	]
52:	=
53:	=
54:	"
55:	Hello
56:	"
57:	[
58:	x
59:	]
60:	;
61:	x
62:	<
63:	6
64:	;
65:	>
66:	<
67:	;
68:	name1
69:	[
70:	x
71:	]
72:	=
73:	s
74:	[
75:	i
76:	+
77:	x
78:	]
79:	;
80:	(
81:	s
82:	[
83:	i
84:	+
85:	x
86:	]
87:	!
88:	=
89:	'
90:	!
91:	'
92:	||
93:	(
94:	name1
95:	[
96:	x
97:	]
98:	=
99:	0
100:	)
101:	)
102:	;
103:	>
104:	)
105:	{
106:	m_state_test
107:	+
108:	=
109:	1
110:	;
111:	return
112:	(
113:	cat
114:	(
115:	"
116:	Hello
117:	 
118:	"
119:	,
120:	name1
121:	,
122:	"
123:	!
124:	:
125:	)
126:	)
127:	\
128:	n
129:	"
130:	)
131:	)
132:	;
133:	}
Macro pattern[pattern='
	<; s[i + x] == "Hello"[x] 	; x < 6 ;>
		<; name1[x] = s[i + x] 	; (s[i + x] != '!' || (name1[x] = 0)) ; >
'
	body='
	m_state_test += 1;
	return(cat("Hello ", name1, "!:))\n"));
']
134:	int
135:	main
main begins at 134
136:	(
137:	int
138:	ac
139:	,
140:	char
141:	*
142:	*
143:	av
144:	)
145:	{
146:	printf
147:	(
148:	"
149:	Hello
150:	 
151:	aa
152:	,
153:	 
154:	bb
155:	!
156:	 
157:	Hallo
158:	 
159:	joe
160:	;
161:	"
162:	)
163:	;
164:	return
165:	(
166:	0
167:	)
168:	;
169:	}
pattern=
	<; s[i + x] == "Hallo"[x] ; x < 6  ;>
		<; name[x] = s[i + x] ; s[i + x] != semicolon ;>
 - body=
	return (cat("Hello ", name));

pattern=
	<; s[i + x] == "Hello"[x] 	; x < 6 ;>
		<; name1[x] = s[i + x] 	; (s[i + x] != '!' || (name1[x] = 0)) ; >
 - body=
	m_state_test += 1;
	return(cat("Hello ", name1, "!:))\n"));

__________
file ./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler.c generated!
cc -g -I./ft_cedille_spec ./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler.c -o \
			./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler
cc -g -I./ft_cedille_spec ./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler.c -o \
			./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler
./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler\
			./ft_cedille_spec/spec-mvp.รง ./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.c
out_file=./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.c fd=3
source_file=./ft_cedille_spec/spec-mvp.รง fd=4
cc -g -I./ft_cedille_spec ./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.c -o\
			./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp
