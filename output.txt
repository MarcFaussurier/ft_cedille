cc  -g 	compiler.c \
			get_next_linev2/get_next_line.c\
			get_next_linev2/get_next_line_utils.c\
		-o รงc
valgrind ./รงc -I./ft_cedille_spec ./ft_cedille_spec/spec-mvp.รง -e -compiler.c -o ./ft_cedille_spec_build
output path	: ./ft_cedille_spec_build
output sufix	: -compiler.c
includes[]	: /usr/include
includes[]	: /usr/local/include
includes[]	: ./ft_cedille_spec
sources[]	: ./ft_cedille_spec/spec-mvp.รง
__________
#parsing: ./ft_cedille_spec/spec-mvp.รง
0:	#
1:	import
2:	"
3:	รง
4:	"
__________
#parsing: รง
-- parse() returned 0
__________
#parsing: /usr/include/รง
-- parse(/usr/include/รง) returned 4242
__________
#parsing: /usr/local/include/รง
-- parse(/usr/local/include/รง) returned 4242
__________
#parsing: ./ft_cedille_spec/รง
0:	#
1:	ifndef
2:	FT_CEDILLE_H
3:	#
4:	define
5:	FT_CEDILLE_H
6:	#
7:	define
8:	TOKENPASTE
9:	(
10:	x
11:	,
12:	y
13:	)
14:	x
15:	#
16:	#
17:	y
18:	#
19:	define
20:	TOKENPASTE2
21:	(
22:	x
23:	,
24:	y
25:	)
26:	TOKENPASTE
27:	(
28:	x
29:	,
30:	y
31:	)
32:	#
33:	define
34:	rule
35:	(
36:	.
37:	.
38:	.
39:	)
40:	TOKENPASTE2
41:	(
42:	char
43:	*
44:	r_
45:	,
46:	__LINE__
47:	)
48:	(
49:	int
50:	i
51:	,
52:	int
53:	x
54:	,
55:	char
56:	*
57:	s
58:	)
59:	#
60:	define
61:	macro
62:	#
63:	define
64:	cat
65:	(
66:	.
67:	.
68:	.
69:	)
70:	"
71:	"
72:	#
73:	endif
__________
5:	#
6:	import
7:	"
8:	spec
9:	-
10:	mvp2
11:	.
12:	รง
13:	"
__________
#parsing: spec-mvp2.รง
-- parse(./ft_cedille_spec/รง) returned 0
__________
#parsing: /usr/include/spec-mvp2.รง
-- parse(/usr/include/spec-mvp2.รง) returned 4242
__________
#parsing: /usr/local/include/spec-mvp2.รง
-- parse(/usr/local/include/spec-mvp2.รง) returned 4242
__________
#parsing: ./ft_cedille_spec/spec-mvp2.รง
0:	#
1:	import
2:	"
3:	รง
4:	"
[1mรง:0:0: [31merror: [0m[1mFile 'รง' already included !
[0m
5:	macro
6:	int
7:	g
8:	(
9:	int
10:	z
11:	)
12:	{
13:	return
14:	z
15:	;
16:	}
17:	macro
18:	rule
19:	(
20:	<
21:	s
22:	[
23:	i
24:	+
25:	x
26:	]
27:	=
28:	=
29:	"
30:	HEllo
31:	"
32:	[
33:	x
34:	]
35:	;
36:	s
37:	[
38:	i
39:	+
40:	x
41:	]
42:	>
43:	<
44:	name
45:	[
46:	x
47:	]
48:	=
49:	s
50:	[
51:	i
52:	+
53:	x
54:	]
55:	;
56:	s
57:	[
58:	i
59:	+
60:	x
61:	]
62:	!
63:	=
64:	'
65:	;
66:	'
67:	>
68:	)
69:	{
70:	return
71:	(
72:	cat
73:	(
74:	"
75:	Hello
76:	 
77:	"
78:	,
79:	name
80:	)
81:	)
82:	;
83:	}
Macro pattern[pattern='
	<s[i + x] == "HEllo"[x] ; s[i + x]>
		<name[x] = s[i + x] ; s[i + x] != ';'>
'
	body='
	return (cat("Hello ", name));
']
__________
14:	macro
15:	int
16:	m_state_test
17:	=
18:	0
19:	;
20:	macro
21:	int
22:	f
23:	(
24:	int
25:	x
26:	)
27:	{
28:	return
29:	(
30:	x
31:	)
32:	;
33:	}
34:	macro
35:	rule
36:	(
37:	<
38:	s
39:	[
40:	i
41:	+
42:	x
43:	]
44:	=
45:	=
46:	"
47:	Hello
48:	"
49:	[
50:	x
51:	]
52:	;
53:	x
54:	>
55:	=
56:	5
57:	>
58:	<
59:	name1
60:	[
61:	x
62:	]
63:	=
64:	s
65:	[
66:	i
67:	+
68:	x
69:	]
70:	;
71:	s
72:	[
73:	i
74:	+
75:	x
76:	]
77:	!
78:	=
79:	'
80:	!
81:	'
82:	>
83:	)
84:	{
85:	m_state_test
86:	+
87:	=
88:	1
89:	;
90:	return
91:	(
92:	cat
93:	(
94:	"
95:	Hello
96:	 
97:	"
98:	,
99:	name1
100:	)
101:	)
102:	;
103:	}
Macro pattern[pattern='
	<s[i + x] == "Hello"[x] 	; x >= 5>
		<name1[x] = s[i + x] 	; s[i + x] != '!'>
'
	body='
	m_state_test += 1;
	return(cat("Hello ", name1));
']
104:	int
105:	main
main begins at 104
106:	(
107:	int
108:	ac
109:	,
110:	char
111:	*
112:	*
113:	av
114:	)
115:	{
116:	printf
117:	(
118:	"
119:	Hello
120:	 
121:	aa
122:	,
123:	 
124:	bb
125:	!
126:	"
127:	)
128:	;
129:	return
130:	(
131:	0
132:	)
133:	;
134:	}
pattern=
	<s[i + x] == "HEllo"[x] ; s[i + x]>
		<name[x] = s[i + x] ; s[i + x] != ';'>
 - body=
	return (cat("Hello ", name));

pattern=
	<s[i + x] == "Hello"[x] 	; x >= 5>
		<name1[x] = s[i + x] 	; s[i + x] != '!'>
 - body=
	m_state_test += 1;
	return(cat("Hello ", name1));

__________
file ./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler.c generated!
cc -g -I./ft_cedille_spec ./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler.c -o \
			./ft_cedille_spec_build/./ft_cedille_spec/spec-mvp.รง-compiler
